   1               		.file	"AES_DEC_128.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	add_round_key
  12               	add_round_key:
  13               	.LFB1:
  14               		.file 1 "../src/AES_DEC_128.c"
   1:../src/AES_DEC_128.c **** /*
   2:../src/AES_DEC_128.c ****  * Copyright 2019 Chander Kumar <chander@chanderkumar>
   3:../src/AES_DEC_128.c ****  * 
   4:../src/AES_DEC_128.c ****  * This program is free software; you can redistribute it and/or modify
   5:../src/AES_DEC_128.c ****  * it under the terms of the GNU General Public License as published by
   6:../src/AES_DEC_128.c ****  * the Free Software Foundation; either version 2 of the License, or
   7:../src/AES_DEC_128.c ****  * (at your option) any later version.
   8:../src/AES_DEC_128.c ****  * 
   9:../src/AES_DEC_128.c ****  * This program is distributed in the hope that it will be useful,
  10:../src/AES_DEC_128.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../src/AES_DEC_128.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../src/AES_DEC_128.c ****  * GNU General Public License for more details.
  13:../src/AES_DEC_128.c ****  * 
  14:../src/AES_DEC_128.c ****  * You should have received a copy of the GNU General Public License
  15:../src/AES_DEC_128.c ****  * along with this program; if not, write to the Free Software
  16:../src/AES_DEC_128.c ****  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
  17:../src/AES_DEC_128.c ****  * MA 02110-1301, USA.
  18:../src/AES_DEC_128.c ****  * 
  19:../src/AES_DEC_128.c ****  * 
  20:../src/AES_DEC_128.c ****  */
  21:../src/AES_DEC_128.c **** 
  22:../src/AES_DEC_128.c **** 
  23:../src/AES_DEC_128.c **** #include <stdio.h>
  24:../src/AES_DEC_128.c **** #include <string.h>
  25:../src/AES_DEC_128.c **** #include <AES.h>
  26:../src/AES_DEC_128.c **** 
  27:../src/AES_DEC_128.c **** const uint8_t aes_sbox[256] = {
  28:../src/AES_DEC_128.c ****  0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
  29:../src/AES_DEC_128.c ****  0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
  30:../src/AES_DEC_128.c ****  0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
  31:../src/AES_DEC_128.c ****  0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
  32:../src/AES_DEC_128.c ****  0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
  33:../src/AES_DEC_128.c ****  0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
  34:../src/AES_DEC_128.c ****  0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
  35:../src/AES_DEC_128.c ****  0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
  36:../src/AES_DEC_128.c ****  0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
  37:../src/AES_DEC_128.c ****  0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
  38:../src/AES_DEC_128.c ****  0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
  39:../src/AES_DEC_128.c ****  0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
  40:../src/AES_DEC_128.c ****  0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
  41:../src/AES_DEC_128.c ****  0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
  42:../src/AES_DEC_128.c ****  0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
  43:../src/AES_DEC_128.c ****  0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
  44:../src/AES_DEC_128.c **** };
  45:../src/AES_DEC_128.c **** 
  46:../src/AES_DEC_128.c **** const uint8_t aes_invsbox[256] = {
  47:../src/AES_DEC_128.c ****  0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
  48:../src/AES_DEC_128.c ****  0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
  49:../src/AES_DEC_128.c ****  0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
  50:../src/AES_DEC_128.c ****  0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
  51:../src/AES_DEC_128.c ****  0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
  52:../src/AES_DEC_128.c ****  0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
  53:../src/AES_DEC_128.c ****  0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
  54:../src/AES_DEC_128.c ****  0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
  55:../src/AES_DEC_128.c ****  0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
  56:../src/AES_DEC_128.c ****  0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
  57:../src/AES_DEC_128.c ****  0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
  58:../src/AES_DEC_128.c ****  0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
  59:../src/AES_DEC_128.c ****  0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
  60:../src/AES_DEC_128.c ****  0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
  61:../src/AES_DEC_128.c ****  0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
  62:../src/AES_DEC_128.c ****  0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
  63:../src/AES_DEC_128.c **** };
  64:../src/AES_DEC_128.c **** 
  65:../src/AES_DEC_128.c **** const uint8_t rcon [10] ={0x01, 0x02,  0x04, 0x08,  0x10,  0x20,  0x40,  0x80,  0x1b,  0x36}; 
  66:../src/AES_DEC_128.c **** uint8_t cipherText [16] ={0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0
  67:../src/AES_DEC_128.c **** uint8_t	stateText [16];
  68:../src/AES_DEC_128.c **** uint8_t roundkeyarr[176];
  69:../src/AES_DEC_128.c **** uint8_t key[16]={0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f};
  70:../src/AES_DEC_128.c **** 
  71:../src/AES_DEC_128.c **** 
  72:../src/AES_DEC_128.c **** void add_round_key(uint8_t* stateText, uint8_t* roundKey, uint8_t roundnum){
  15               		.loc 1 72 0
  16               		.cfi_startproc
  17               	.LVL0:
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22 0000 DB01      		movw r26,r22
  23 0002 80E1      		ldi r24,lo8(16)
  24               	.LVL1:
  25 0004 489F      		mul r20,r24
  26 0006 A00D      		add r26,r0
  27 0008 B11D      		adc r27,r1
  28 000a 1124      		clr __zero_reg__
  29 000c E0E0      		ldi r30,lo8(cipherText)
  30 000e F0E0      		ldi r31,hi8(cipherText)
  31               	.LVL2:
  32               	.L2:
  33               	.LBB2:
  73:../src/AES_DEC_128.c **** 	 for (uint8_t i =0; i<16; i++){
  74:../src/AES_DEC_128.c **** 		 cipherText[i] ^= roundKey[16*roundnum + i];
  34               		.loc 1 74 0 discriminator 3
  35 0010 8D91      		ld r24,X+
  36 0012 9081      		ld r25,Z
  37 0014 8927      		eor r24,r25
  38 0016 8193      		st Z+,r24
  39               	.LVL3:
  73:../src/AES_DEC_128.c **** 	 for (uint8_t i =0; i<16; i++){
  40               		.loc 1 73 0 discriminator 3
  41 0018 80E0      		ldi r24,hi8(cipherText+16)
  42 001a E030      		cpi r30,lo8(cipherText+16)
  43 001c F807      		cpc r31,r24
  44 001e 01F4      		brne .L2
  45               	/* epilogue start */
  46               	.LBE2:
  75:../src/AES_DEC_128.c **** 		  }
  76:../src/AES_DEC_128.c **** 	 }
  47               		.loc 1 76 0
  48 0020 0895      		ret
  49               		.cfi_endproc
  50               	.LFE1:
  52               	.global	inverse_subbytes
  54               	inverse_subbytes:
  55               	.LFB2:
  77:../src/AES_DEC_128.c **** void inverse_subbytes(uint8_t* stateText,  const uint8_t* invsbox){
  56               		.loc 1 77 0
  57               		.cfi_startproc
  58               	.LVL4:
  59               	/* prologue: function */
  60               	/* frame size = 0 */
  61               	/* stack size = 0 */
  62               	.L__stack_usage = 0
  63 0022 FC01      		movw r30,r24
  64 0024 4096      		adiw r24,16
  65               	.LVL5:
  66               	.L6:
  67               	.LBB3:
  78:../src/AES_DEC_128.c **** 	for(uint8_t i =0; i<16; i++){
  79:../src/AES_DEC_128.c **** 		stateText[i] = invsbox[stateText[i]];
  68               		.loc 1 79 0 discriminator 3
  69 0026 2081      		ld r18,Z
  70 0028 DB01      		movw r26,r22
  71 002a A20F      		add r26,r18
  72 002c B11D      		adc r27,__zero_reg__
  73 002e 2C91      		ld r18,X
  74 0030 2193      		st Z+,r18
  75               	.LVL6:
  78:../src/AES_DEC_128.c **** 	for(uint8_t i =0; i<16; i++){
  76               		.loc 1 78 0 discriminator 3
  77 0032 8E17      		cp r24,r30
  78 0034 9F07      		cpc r25,r31
  79 0036 01F4      		brne .L6
  80               	/* epilogue start */
  81               	.LBE3:
  80:../src/AES_DEC_128.c **** 	}
  81:../src/AES_DEC_128.c **** }
  82               		.loc 1 81 0
  83 0038 0895      		ret
  84               		.cfi_endproc
  85               	.LFE2:
  87               	.global	inverse_shift_rows
  89               	inverse_shift_rows:
  90               	.LFB3:
  82:../src/AES_DEC_128.c **** void inverse_shift_rows(uint8_t* stateText){
  91               		.loc 1 82 0
  92               		.cfi_startproc
  93               	.LVL7:
  94               	/* prologue: function */
  95               	/* frame size = 0 */
  96               	/* stack size = 0 */
  97               	.L__stack_usage = 0
  98 003a FC01      		movw r30,r24
  83:../src/AES_DEC_128.c **** 			 uint8_t temp0 = stateText[13];
  99               		.loc 1 83 0
 100 003c 3585      		ldd r19,Z+13
 101               	.LVL8:
  84:../src/AES_DEC_128.c **** 			 uint8_t temp1 = stateText[14];
 102               		.loc 1 84 0
 103 003e 2685      		ldd r18,Z+14
 104               	.LVL9:
  85:../src/AES_DEC_128.c **** 			 uint8_t temp2 = stateText[10];
 105               		.loc 1 85 0
 106 0040 9285      		ldd r25,Z+10
 107               	.LVL10:
  86:../src/AES_DEC_128.c **** 			 uint8_t temp3= stateText[3];
 108               		.loc 1 86 0
 109 0042 8381      		ldd r24,Z+3
 110               	.LVL11:
  87:../src/AES_DEC_128.c **** 			 
  88:../src/AES_DEC_128.c **** 			stateText[13]=stateText[9];
 111               		.loc 1 88 0
 112 0044 4185      		ldd r20,Z+9
 113 0046 4587      		std Z+13,r20
  89:../src/AES_DEC_128.c **** 			stateText[9]=stateText[5];
 114               		.loc 1 89 0
 115 0048 4581      		ldd r20,Z+5
 116 004a 4187      		std Z+9,r20
  90:../src/AES_DEC_128.c **** 			stateText[5]=stateText[1];
 117               		.loc 1 90 0
 118 004c 4181      		ldd r20,Z+1
 119 004e 4583      		std Z+5,r20
  91:../src/AES_DEC_128.c **** 			stateText[1]=temp0;
 120               		.loc 1 91 0
 121 0050 3183      		std Z+1,r19
  92:../src/AES_DEC_128.c **** 			
  93:../src/AES_DEC_128.c **** 			stateText[14]=stateText[6];
 122               		.loc 1 93 0
 123 0052 3681      		ldd r19,Z+6
 124               	.LVL12:
 125 0054 3687      		std Z+14,r19
  94:../src/AES_DEC_128.c **** 			stateText[10]=stateText[2];
 126               		.loc 1 94 0
 127 0056 3281      		ldd r19,Z+2
 128 0058 3287      		std Z+10,r19
  95:../src/AES_DEC_128.c **** 			stateText[6]=temp1;
 129               		.loc 1 95 0
 130 005a 2683      		std Z+6,r18
  96:../src/AES_DEC_128.c **** 			stateText[2]=temp2;
 131               		.loc 1 96 0
 132 005c 9283      		std Z+2,r25
  97:../src/AES_DEC_128.c **** 			
  98:../src/AES_DEC_128.c **** 			stateText[3]=stateText[7];
 133               		.loc 1 98 0
 134 005e 9781      		ldd r25,Z+7
 135               	.LVL13:
 136 0060 9383      		std Z+3,r25
  99:../src/AES_DEC_128.c **** 			stateText[7]=stateText[11];
 137               		.loc 1 99 0
 138 0062 9385      		ldd r25,Z+11
 139 0064 9783      		std Z+7,r25
 100:../src/AES_DEC_128.c **** 			stateText[11]=stateText[15];
 140               		.loc 1 100 0
 141 0066 9785      		ldd r25,Z+15
 142 0068 9387      		std Z+11,r25
 101:../src/AES_DEC_128.c **** 			stateText[15]=temp3;
 143               		.loc 1 101 0
 144 006a 8787      		std Z+15,r24
 145 006c 0895      		ret
 146               		.cfi_endproc
 147               	.LFE3:
 149               	.global	gf256mul
 151               	gf256mul:
 152               	.LFB4:
 102:../src/AES_DEC_128.c **** 	 
 103:../src/AES_DEC_128.c **** }
 104:../src/AES_DEC_128.c **** uint8_t gf256mul(uint8_t in1, uint8_t in2){
 153               		.loc 1 104 0
 154               		.cfi_startproc
 155               	.LVL14:
 156               	/* prologue: function */
 157               	/* frame size = 0 */
 158               	/* stack size = 0 */
 159               	.L__stack_usage = 0
 105:../src/AES_DEC_128.c ****     uint8_t prod = 0;
 160               		.loc 1 105 0
 161 006e 90E0      		ldi r25,0
 106:../src/AES_DEC_128.c ****     for (; in2; in2 >>= 1) {
 107:../src/AES_DEC_128.c ****         if (in2 & 1)
 108:../src/AES_DEC_128.c ****             prod ^= in1;
 109:../src/AES_DEC_128.c ****         if (in1 & 0x80)
 110:../src/AES_DEC_128.c ****             in1 = (in1 << 1) ^ 0x1b;
 162               		.loc 1 110 0
 163 0070 2BE1      		ldi r18,lo8(27)
 164               	.LVL15:
 165               	.L10:
 106:../src/AES_DEC_128.c ****     for (; in2; in2 >>= 1) {
 166               		.loc 1 106 0 discriminator 1
 167 0072 6623      		tst r22
 168 0074 01F0      		breq .L18
 107:../src/AES_DEC_128.c ****             prod ^= in1;
 169               		.loc 1 107 0
 170 0076 60FD      		sbrc r22,0
 108:../src/AES_DEC_128.c ****         if (in1 & 0x80)
 171               		.loc 1 108 0
 172 0078 9827      		eor r25,r24
 173               	.LVL16:
 174               	.L11:
 109:../src/AES_DEC_128.c ****             in1 = (in1 << 1) ^ 0x1b;
 175               		.loc 1 109 0
 176 007a 87FF      		sbrs r24,7
 177 007c 00C0      		rjmp .L12
 178               		.loc 1 110 0
 179 007e 880F      		lsl r24
 180               	.LVL17:
 181 0080 8227      		eor r24,r18
 182               	.LVL18:
 183 0082 00C0      		rjmp .L13
 184               	.L12:
 111:../src/AES_DEC_128.c ****         else
 112:../src/AES_DEC_128.c ****             in1 <<= 1;
 185               		.loc 1 112 0
 186 0084 880F      		lsl r24
 187               	.LVL19:
 188               	.L13:
 106:../src/AES_DEC_128.c ****         if (in2 & 1)
 189               		.loc 1 106 0
 190 0086 6695      		lsr r22
 191               	.LVL20:
 192 0088 00C0      		rjmp .L10
 193               	.L18:
 113:../src/AES_DEC_128.c ****     }
 114:../src/AES_DEC_128.c ****     return prod;
 115:../src/AES_DEC_128.c **** }
 194               		.loc 1 115 0
 195 008a 892F      		mov r24,r25
 196               	.LVL21:
 197 008c 0895      		ret
 198               		.cfi_endproc
 199               	.LFE4:
 201               	.global	inverse_mix_coloumns
 203               	inverse_mix_coloumns:
 204               	.LFB5:
 116:../src/AES_DEC_128.c **** 
 117:../src/AES_DEC_128.c ****  void inverse_mix_coloumns(uint8_t* s){
 205               		.loc 1 117 0
 206               		.cfi_startproc
 207               	.LVL22:
 208 008e BF92      		push r11
 209               	.LCFI0:
 210               		.cfi_def_cfa_offset 3
 211               		.cfi_offset 11, -2
 212 0090 CF92      		push r12
 213               	.LCFI1:
 214               		.cfi_def_cfa_offset 4
 215               		.cfi_offset 12, -3
 216 0092 DF92      		push r13
 217               	.LCFI2:
 218               		.cfi_def_cfa_offset 5
 219               		.cfi_offset 13, -4
 220 0094 EF92      		push r14
 221               	.LCFI3:
 222               		.cfi_def_cfa_offset 6
 223               		.cfi_offset 14, -5
 224 0096 FF92      		push r15
 225               	.LCFI4:
 226               		.cfi_def_cfa_offset 7
 227               		.cfi_offset 15, -6
 228 0098 0F93      		push r16
 229               	.LCFI5:
 230               		.cfi_def_cfa_offset 8
 231               		.cfi_offset 16, -7
 232 009a 1F93      		push r17
 233               	.LCFI6:
 234               		.cfi_def_cfa_offset 9
 235               		.cfi_offset 17, -8
 236 009c CF93      		push r28
 237               	.LCFI7:
 238               		.cfi_def_cfa_offset 10
 239               		.cfi_offset 28, -9
 240 009e DF93      		push r29
 241               	.LCFI8:
 242               		.cfi_def_cfa_offset 11
 243               		.cfi_offset 29, -10
 244               	/* prologue: function */
 245               	/* frame size = 0 */
 246               	/* stack size = 9 */
 247               	.L__stack_usage = 9
 248 00a0 EC01      		movw r28,r24
 249               	.LVL23:
 250 00a2 7C01      		movw r14,r24
 251 00a4 80E1      		ldi r24,16
 252 00a6 E80E      		add r14,r24
 253 00a8 F11C      		adc r15,__zero_reg__
 254               	.LVL24:
 255               	.L20:
 256               	.LBB4:
 257               	.LBB5:
 118:../src/AES_DEC_128.c **** 	 for (uint8_t i=0 ; i<4 ; i++){
 119:../src/AES_DEC_128.c **** 		 uint8_t index = 4*i; 
 120:../src/AES_DEC_128.c **** 		 uint8_t temp0 = s[index];
 258               		.loc 1 120 0 discriminator 3
 259 00aa B880      		ld r11,Y
 260               	.LVL25:
 121:../src/AES_DEC_128.c **** 		 uint8_t temp1 = s[index+1];
 261               		.loc 1 121 0 discriminator 3
 262 00ac C980      		ldd r12,Y+1
 263               	.LVL26:
 122:../src/AES_DEC_128.c **** 		 uint8_t temp2 = s[index+2];
 264               		.loc 1 122 0 discriminator 3
 265 00ae DA80      		ldd r13,Y+2
 266               	.LVL27:
 123:../src/AES_DEC_128.c **** 	s[index] =  gf256mul(0x0e , s[index]) ^ gf256mul(0x0b,s[index+1])^gf256mul(0x0d, s[index+2])^gf256
 267               		.loc 1 123 0 discriminator 3
 268 00b0 6B2D      		mov r22,r11
 269 00b2 8EE0      		ldi r24,lo8(14)
 270 00b4 0E94 0000 		call gf256mul
 271               	.LVL28:
 272 00b8 182F      		mov r17,r24
 273 00ba 6C2D      		mov r22,r12
 274 00bc 8BE0      		ldi r24,lo8(11)
 275 00be 0E94 0000 		call gf256mul
 276               	.LVL29:
 277 00c2 1827      		eor r17,r24
 278 00c4 6D2D      		mov r22,r13
 279 00c6 8DE0      		ldi r24,lo8(13)
 280 00c8 0E94 0000 		call gf256mul
 281               	.LVL30:
 282 00cc 1827      		eor r17,r24
 283 00ce 0B81      		ldd r16,Y+3
 284 00d0 602F      		mov r22,r16
 285 00d2 89E0      		ldi r24,lo8(9)
 286 00d4 0E94 0000 		call gf256mul
 287               	.LVL31:
 288 00d8 8127      		eor r24,r17
 289 00da 8883      		st Y,r24
 124:../src/AES_DEC_128.c **** 	 s[index+1] =  gf256mul(0x09 , temp0) ^ gf256mul(0x0e,s[index+1])^gf256mul(0x0b, s[index+2])^gf256
 290               		.loc 1 124 0 discriminator 3
 291 00dc 6B2D      		mov r22,r11
 292 00de 89E0      		ldi r24,lo8(9)
 293 00e0 0E94 0000 		call gf256mul
 294               	.LVL32:
 295 00e4 182F      		mov r17,r24
 296 00e6 6C2D      		mov r22,r12
 297 00e8 8EE0      		ldi r24,lo8(14)
 298 00ea 0E94 0000 		call gf256mul
 299               	.LVL33:
 300 00ee 1827      		eor r17,r24
 301 00f0 6D2D      		mov r22,r13
 302 00f2 8BE0      		ldi r24,lo8(11)
 303 00f4 0E94 0000 		call gf256mul
 304               	.LVL34:
 305 00f8 1827      		eor r17,r24
 306 00fa 602F      		mov r22,r16
 307 00fc 8DE0      		ldi r24,lo8(13)
 308 00fe 0E94 0000 		call gf256mul
 309               	.LVL35:
 310 0102 8127      		eor r24,r17
 311 0104 8983      		std Y+1,r24
 125:../src/AES_DEC_128.c **** 	 s[index+2] =  gf256mul(0x0d , temp0) ^ gf256mul(0x09,temp1)^gf256mul(0x0e, temp2)^gf256mul(0x0b ,
 312               		.loc 1 125 0 discriminator 3
 313 0106 6B2D      		mov r22,r11
 314 0108 8DE0      		ldi r24,lo8(13)
 315 010a 0E94 0000 		call gf256mul
 316               	.LVL36:
 317 010e 182F      		mov r17,r24
 318 0110 6C2D      		mov r22,r12
 319 0112 89E0      		ldi r24,lo8(9)
 320 0114 0E94 0000 		call gf256mul
 321               	.LVL37:
 322 0118 1827      		eor r17,r24
 323 011a 6D2D      		mov r22,r13
 324 011c 8EE0      		ldi r24,lo8(14)
 325 011e 0E94 0000 		call gf256mul
 326               	.LVL38:
 327 0122 1827      		eor r17,r24
 328 0124 602F      		mov r22,r16
 329 0126 8BE0      		ldi r24,lo8(11)
 330 0128 0E94 0000 		call gf256mul
 331               	.LVL39:
 332 012c 8127      		eor r24,r17
 333 012e 8A83      		std Y+2,r24
 126:../src/AES_DEC_128.c **** 	 s[index+3] =  gf256mul(0x0b , temp0) ^ gf256mul(0x0d,temp1)^gf256mul(0x09, temp2)^gf256mul(0x0e ,
 334               		.loc 1 126 0 discriminator 3
 335 0130 6B2D      		mov r22,r11
 336 0132 8BE0      		ldi r24,lo8(11)
 337 0134 0E94 0000 		call gf256mul
 338               	.LVL40:
 339 0138 182F      		mov r17,r24
 340 013a 6C2D      		mov r22,r12
 341 013c 8DE0      		ldi r24,lo8(13)
 342 013e 0E94 0000 		call gf256mul
 343               	.LVL41:
 344 0142 1827      		eor r17,r24
 345 0144 6D2D      		mov r22,r13
 346 0146 89E0      		ldi r24,lo8(9)
 347 0148 0E94 0000 		call gf256mul
 348               	.LVL42:
 349 014c 1827      		eor r17,r24
 350 014e 602F      		mov r22,r16
 351 0150 8EE0      		ldi r24,lo8(14)
 352 0152 0E94 0000 		call gf256mul
 353               	.LVL43:
 354 0156 8127      		eor r24,r17
 355 0158 8B83      		std Y+3,r24
 356 015a 2496      		adiw r28,4
 357               	.LVL44:
 358               	.LBE5:
 118:../src/AES_DEC_128.c **** 		 uint8_t index = 4*i; 
 359               		.loc 1 118 0 discriminator 3
 360 015c CE15      		cp r28,r14
 361 015e DF05      		cpc r29,r15
 362 0160 01F0      		breq .+2
 363 0162 00C0      		rjmp .L20
 364               	/* epilogue start */
 365               	.LBE4:
 127:../src/AES_DEC_128.c **** 	 }
 128:../src/AES_DEC_128.c **** 	 
 129:../src/AES_DEC_128.c **** }
 366               		.loc 1 129 0
 367 0164 DF91      		pop r29
 368 0166 CF91      		pop r28
 369               	.LVL45:
 370 0168 1F91      		pop r17
 371 016a 0F91      		pop r16
 372 016c FF90      		pop r15
 373 016e EF90      		pop r14
 374               	.LVL46:
 375 0170 DF90      		pop r13
 376               	.LVL47:
 377 0172 CF90      		pop r12
 378               	.LVL48:
 379 0174 BF90      		pop r11
 380               	.LVL49:
 381 0176 0895      		ret
 382               		.cfi_endproc
 383               	.LFE5:
 385               	.global	gen_roundkey
 387               	gen_roundkey:
 388               	.LFB6:
 130:../src/AES_DEC_128.c **** 
 131:../src/AES_DEC_128.c **** void gen_roundkey(uint8_t* key , uint8_t* k,  const uint8_t* sboxarr,  const uint8_t* rcont){
 389               		.loc 1 131 0
 390               		.cfi_startproc
 391               	.LVL50:
 392 0178 CF93      		push r28
 393               	.LCFI9:
 394               		.cfi_def_cfa_offset 3
 395               		.cfi_offset 28, -2
 396 017a DF93      		push r29
 397               	.LCFI10:
 398               		.cfi_def_cfa_offset 4
 399               		.cfi_offset 29, -3
 400               	/* prologue: function */
 401               	/* frame size = 0 */
 402               	/* stack size = 2 */
 403               	.L__stack_usage = 2
 404 017c DC01      		movw r26,r24
 132:../src/AES_DEC_128.c **** 	
 133:../src/AES_DEC_128.c **** 	memcpy(key,k,16);
 405               		.loc 1 133 0
 406 017e 90E1      		ldi r25,lo8(16)
 407 0180 FB01      		movw r30,r22
 408               		0:
 409 0182 0190      		ld r0,Z+
 410 0184 0D92      		st X+,r0
 411 0186 9A95      		dec r25
 412 0188 01F4      		brne 0b
 413               	.LVL51:
 414 018a EB01      		movw r28,r22
 415               	.LBB6:
 134:../src/AES_DEC_128.c **** 	
 135:../src/AES_DEC_128.c **** 	for(uint8_t i=16; i<176; i+=4){
 416               		.loc 1 135 0
 417 018c 80E1      		ldi r24,lo8(16)
 418               	.LVL52:
 419               	.L24:
 136:../src/AES_DEC_128.c **** 		memcpy(k[i],k[i-4],4);
 420               		.loc 1 136 0
 421 018e A889      		ldd r26,Y+16
 422 0190 B0E0      		ldi r27,0
 423 0192 EC85      		ldd r30,Y+12
 424 0194 F0E0      		ldi r31,0
 425 0196 94E0      		ldi r25,lo8(4)
 426               		0:
 427 0198 0190      		ld r0,Z+
 428 019a 0D92      		st X+,r0
 429 019c 9A95      		dec r25
 430 019e 01F4      		brne 0b
 137:../src/AES_DEC_128.c **** 		if (i % 16 == 0 && i!=0){	
 431               		.loc 1 137 0
 432 01a0 982F      		mov r25,r24
 433 01a2 9F70      		andi r25,lo8(15)
 434 01a4 01F4      		brne .L23
 435               	.LBB7:
 138:../src/AES_DEC_128.c **** 			
 139:../src/AES_DEC_128.c **** 			// cyclic shift of first four bytes
 140:../src/AES_DEC_128.c **** 			uint8_t temp = k[i+3];
 436               		.loc 1 140 0
 437 01a6 6B89      		ldd r22,Y+19
 438               	.LVL53:
 141:../src/AES_DEC_128.c **** 			k[i] = k[i+1];
 439               		.loc 1 141 0
 440 01a8 9989      		ldd r25,Y+17
 441 01aa 988B      		std Y+16,r25
 142:../src/AES_DEC_128.c **** 			k[i+1] = k[i+2];
 442               		.loc 1 142 0
 443 01ac 7A89      		ldd r23,Y+18
 444 01ae 798B      		std Y+17,r23
 143:../src/AES_DEC_128.c **** 			k[i+2] = k[i+3];
 445               		.loc 1 143 0
 446 01b0 6A8B      		std Y+18,r22
 144:../src/AES_DEC_128.c **** 			k[i+3] = temp;
 145:../src/AES_DEC_128.c **** 		
 146:../src/AES_DEC_128.c **** 			// subbytes for i.e. is replacing the each bytes from sbix array
 147:../src/AES_DEC_128.c **** 			k[i]   = sboxarr[k[i]];
 447               		.loc 1 147 0
 448 01b2 FA01      		movw r30,r20
 449 01b4 E90F      		add r30,r25
 450 01b6 F11D      		adc r31,__zero_reg__
 451 01b8 9081      		ld r25,Z
 452 01ba 988B      		std Y+16,r25
 148:../src/AES_DEC_128.c **** 			k[i+1] = sboxarr[k[i+1]];
 453               		.loc 1 148 0
 454 01bc FA01      		movw r30,r20
 455 01be E70F      		add r30,r23
 456 01c0 F11D      		adc r31,__zero_reg__
 457 01c2 7081      		ld r23,Z
 458 01c4 798B      		std Y+17,r23
 149:../src/AES_DEC_128.c **** 			k[i+2] = sboxarr[k[i+2]];
 459               		.loc 1 149 0
 460 01c6 FA01      		movw r30,r20
 461 01c8 E60F      		add r30,r22
 462 01ca F11D      		adc r31,__zero_reg__
 463 01cc 6081      		ld r22,Z
 464               	.LVL54:
 465 01ce 6A8B      		std Y+18,r22
 150:../src/AES_DEC_128.c **** 			k[i+3] = sboxarr[k[i+3]];
 466               		.loc 1 150 0
 467 01d0 6081      		ld r22,Z
 468 01d2 6B8B      		std Y+19,r22
 469               	.LVL55:
 151:../src/AES_DEC_128.c **** 			
 152:../src/AES_DEC_128.c **** 			//multiplication with rcon constant array
 153:../src/AES_DEC_128.c **** 			k[i]   ^=rcont[(i/16)-1];
 470               		.loc 1 153 0
 471 01d4 682F      		mov r22,r24
 472 01d6 6295      		swap r22
 473 01d8 6F70      		andi r22,lo8(15)
 474 01da F901      		movw r30,r18
 475 01dc E60F      		add r30,r22
 476 01de F11D      		adc r31,__zero_reg__
 477 01e0 3197      		sbiw r30,1
 478 01e2 6081      		ld r22,Z
 479 01e4 9627      		eor r25,r22
 480 01e6 988B      		std Y+16,r25
 481               	.L23:
 482               	.LBE7:
 154:../src/AES_DEC_128.c **** 			k[i+1] ^=0x0 ;
 155:../src/AES_DEC_128.c **** 			k[i+2] ^=0x0 ;
 156:../src/AES_DEC_128.c **** 			k[i+3] ^=0x0 ;
 157:../src/AES_DEC_128.c **** 		}
 158:../src/AES_DEC_128.c **** 			// xor with previous word
 159:../src/AES_DEC_128.c **** 			k[i]   ^= k[i-16];
 483               		.loc 1 159 0 discriminator 2
 484 01e8 6889      		ldd r22,Y+16
 485 01ea 9881      		ld r25,Y
 486 01ec 9627      		eor r25,r22
 487 01ee 988B      		std Y+16,r25
 160:../src/AES_DEC_128.c **** 			k[i+1] ^= k[i-16 +1];
 488               		.loc 1 160 0 discriminator 2
 489 01f0 6989      		ldd r22,Y+17
 490 01f2 9981      		ldd r25,Y+1
 491 01f4 9627      		eor r25,r22
 492 01f6 998B      		std Y+17,r25
 161:../src/AES_DEC_128.c **** 			k[i+2] ^=k[i-16 +2];
 493               		.loc 1 161 0 discriminator 2
 494 01f8 6A89      		ldd r22,Y+18
 495 01fa 9A81      		ldd r25,Y+2
 496 01fc 9627      		eor r25,r22
 497 01fe 9A8B      		std Y+18,r25
 162:../src/AES_DEC_128.c **** 			k[i+3] ^=k[i-16 +3];
 498               		.loc 1 162 0 discriminator 2
 499 0200 6B89      		ldd r22,Y+19
 500 0202 9B81      		ldd r25,Y+3
 501 0204 9627      		eor r25,r22
 502 0206 9B8B      		std Y+19,r25
 135:../src/AES_DEC_128.c **** 		memcpy(k[i],k[i-4],4);
 503               		.loc 1 135 0 discriminator 2
 504 0208 8C5F      		subi r24,lo8(-(4))
 505               	.LVL56:
 506 020a 2496      		adiw r28,4
 507 020c 803B      		cpi r24,lo8(-80)
 508 020e 01F0      		breq .+2
 509 0210 00C0      		rjmp .L24
 510               	/* epilogue start */
 511               	.LBE6:
 163:../src/AES_DEC_128.c **** 			
 164:../src/AES_DEC_128.c **** 	}
 165:../src/AES_DEC_128.c **** }
 512               		.loc 1 165 0
 513 0212 DF91      		pop r29
 514 0214 CF91      		pop r28
 515 0216 0895      		ret
 516               		.cfi_endproc
 517               	.LFE6:
 519               	.global	aes_dec_128
 521               	aes_dec_128:
 522               	.LFB7:
 166:../src/AES_DEC_128.c **** 
 167:../src/AES_DEC_128.c **** void aes_dec_128(uint8_t* cipherText,  uint8_t* state ,uint8_t* roundkeyarray ){
 523               		.loc 1 167 0
 524               		.cfi_startproc
 525               	.LVL57:
 526 0218 CF93      		push r28
 527               	.LCFI11:
 528               		.cfi_def_cfa_offset 3
 529               		.cfi_offset 28, -2
 530               	/* prologue: function */
 531               	/* frame size = 0 */
 532               	/* stack size = 1 */
 533               	.L__stack_usage = 1
 534 021a DC01      		movw r26,r24
 168:../src/AES_DEC_128.c **** 	  memcpy(cipherText,state,16);
 535               		.loc 1 168 0
 536 021c 90E1      		ldi r25,lo8(16)
 537 021e FB01      		movw r30,r22
 538               		0:
 539 0220 0190      		ld r0,Z+
 540 0222 0D92      		st X+,r0
 541 0224 9A95      		dec r25
 542 0226 01F4      		brne 0b
 543               	.LVL58:
 169:../src/AES_DEC_128.c **** 	  uint8_t roundCount=10;
 170:../src/AES_DEC_128.c **** 	  //add round key
 171:../src/AES_DEC_128.c **** 	  
 172:../src/AES_DEC_128.c **** 	   add_round_key(&stateText[0],&roundkeyarr[0], 10);
 544               		.loc 1 172 0
 545 0228 4AE0      		ldi r20,lo8(10)
 546               	.LVL59:
 547 022a 60E0      		ldi r22,lo8(roundkeyarr)
 548 022c 70E0      		ldi r23,hi8(roundkeyarr)
 549               	.LVL60:
 550 022e 80E0      		ldi r24,lo8(stateText)
 551 0230 90E0      		ldi r25,hi8(stateText)
 552               	.LVL61:
 553 0232 0E94 0000 		call add_round_key
 554               	.LVL62:
 173:../src/AES_DEC_128.c **** 	   roundCount--;
 555               		.loc 1 173 0
 556 0236 C9E0      		ldi r28,lo8(9)
 557               	.LVL63:
 558               	.L27:
 174:../src/AES_DEC_128.c **** 	  // first 9 rounds
 175:../src/AES_DEC_128.c **** 	   for (; roundCount > 0 ; roundCount--){
 176:../src/AES_DEC_128.c **** 			inverse_shift_rows(&stateText[0]);
 559               		.loc 1 176 0 discriminator 2
 560 0238 80E0      		ldi r24,lo8(stateText)
 561 023a 90E0      		ldi r25,hi8(stateText)
 562 023c 0E94 0000 		call inverse_shift_rows
 563               	.LVL64:
 177:../src/AES_DEC_128.c **** 			inverse_subbytes(&stateText[0],&aes_invsbox[0]);
 564               		.loc 1 177 0 discriminator 2
 565 0240 60E0      		ldi r22,lo8(aes_invsbox)
 566 0242 70E0      		ldi r23,hi8(aes_invsbox)
 567 0244 80E0      		ldi r24,lo8(stateText)
 568 0246 90E0      		ldi r25,hi8(stateText)
 569 0248 0E94 0000 		call inverse_subbytes
 570               	.LVL65:
 178:../src/AES_DEC_128.c **** 			add_round_key(&stateText[0],&roundkeyarr[0],roundCount);
 571               		.loc 1 178 0 discriminator 2
 572 024c 4C2F      		mov r20,r28
 573 024e 60E0      		ldi r22,lo8(roundkeyarr)
 574 0250 70E0      		ldi r23,hi8(roundkeyarr)
 575 0252 80E0      		ldi r24,lo8(stateText)
 576 0254 90E0      		ldi r25,hi8(stateText)
 577 0256 0E94 0000 		call add_round_key
 578               	.LVL66:
 179:../src/AES_DEC_128.c **** 			inverse_mix_coloumns(&stateText[0]);
 579               		.loc 1 179 0 discriminator 2
 580 025a 80E0      		ldi r24,lo8(stateText)
 581 025c 90E0      		ldi r25,hi8(stateText)
 582 025e 0E94 0000 		call inverse_mix_coloumns
 583               	.LVL67:
 175:../src/AES_DEC_128.c **** 			inverse_shift_rows(&stateText[0]);
 584               		.loc 1 175 0 discriminator 2
 585 0262 C150      		subi r28,lo8(-(-1))
 586               	.LVL68:
 587 0264 01F4      		brne .L27
 180:../src/AES_DEC_128.c **** 		}
 181:../src/AES_DEC_128.c **** 		
 182:../src/AES_DEC_128.c **** 		//final round
 183:../src/AES_DEC_128.c **** 		inverse_shift_rows(&stateText[0]);
 588               		.loc 1 183 0
 589 0266 80E0      		ldi r24,lo8(stateText)
 590 0268 90E0      		ldi r25,hi8(stateText)
 591 026a 0E94 0000 		call inverse_shift_rows
 592               	.LVL69:
 184:../src/AES_DEC_128.c **** 		inverse_subbytes(&stateText[0],&aes_invsbox[0]);
 593               		.loc 1 184 0
 594 026e 60E0      		ldi r22,lo8(aes_invsbox)
 595 0270 70E0      		ldi r23,hi8(aes_invsbox)
 596 0272 80E0      		ldi r24,lo8(stateText)
 597 0274 90E0      		ldi r25,hi8(stateText)
 598 0276 0E94 0000 		call inverse_subbytes
 599               	.LVL70:
 185:../src/AES_DEC_128.c **** 		add_round_key(&stateText[0],&roundkeyarr[0],roundCount);
 600               		.loc 1 185 0
 601 027a 40E0      		ldi r20,0
 602 027c 60E0      		ldi r22,lo8(roundkeyarr)
 603 027e 70E0      		ldi r23,hi8(roundkeyarr)
 604 0280 80E0      		ldi r24,lo8(stateText)
 605 0282 90E0      		ldi r25,hi8(stateText)
 606               	/* epilogue start */
 186:../src/AES_DEC_128.c **** 		
 187:../src/AES_DEC_128.c **** 		
 188:../src/AES_DEC_128.c **** 		
 189:../src/AES_DEC_128.c **** }
 607               		.loc 1 189 0
 608 0284 CF91      		pop r28
 609               	.LVL71:
 185:../src/AES_DEC_128.c **** 		add_round_key(&stateText[0],&roundkeyarr[0],roundCount);
 610               		.loc 1 185 0
 611 0286 0C94 0000 		jmp add_round_key
 612               	.LVL72:
 613               		.cfi_endproc
 614               	.LFE7:
 616               	.global	key
 617               		.data
 620               	key:
 621 0000 00        		.byte	0
 622 0001 01        		.byte	1
 623 0002 02        		.byte	2
 624 0003 03        		.byte	3
 625 0004 04        		.byte	4
 626 0005 05        		.byte	5
 627 0006 06        		.byte	6
 628 0007 07        		.byte	7
 629 0008 08        		.byte	8
 630 0009 09        		.byte	9
 631 000a 0A        		.byte	10
 632 000b 0B        		.byte	11
 633 000c 0C        		.byte	12
 634 000d 0D        		.byte	13
 635 000e 0E        		.byte	14
 636 000f 0F        		.byte	15
 637               		.comm	roundkeyarr,176,1
 638               		.comm	stateText,16,1
 639               	.global	cipherText
 642               	cipherText:
 643 0010 52        		.byte	82
 644 0011 09        		.byte	9
 645 0012 6A        		.byte	106
 646 0013 D5        		.byte	-43
 647 0014 30        		.byte	48
 648 0015 36        		.byte	54
 649 0016 A5        		.byte	-91
 650 0017 38        		.byte	56
 651 0018 BF        		.byte	-65
 652 0019 40        		.byte	64
 653 001a A3        		.byte	-93
 654 001b 9E        		.byte	-98
 655 001c 81        		.byte	-127
 656 001d F3        		.byte	-13
 657 001e D7        		.byte	-41
 658 001f FB        		.byte	-5
 659               	.global	rcon
 660               		.section	.rodata
 663               	rcon:
 664 0000 01        		.byte	1
 665 0001 02        		.byte	2
 666 0002 04        		.byte	4
 667 0003 08        		.byte	8
 668 0004 10        		.byte	16
 669 0005 20        		.byte	32
 670 0006 40        		.byte	64
 671 0007 80        		.byte	-128
 672 0008 1B        		.byte	27
 673 0009 36        		.byte	54
 674               	.global	aes_invsbox
 677               	aes_invsbox:
 678 000a 52        		.byte	82
 679 000b 09        		.byte	9
 680 000c 6A        		.byte	106
 681 000d D5        		.byte	-43
 682 000e 30        		.byte	48
 683 000f 36        		.byte	54
 684 0010 A5        		.byte	-91
 685 0011 38        		.byte	56
 686 0012 BF        		.byte	-65
 687 0013 40        		.byte	64
 688 0014 A3        		.byte	-93
 689 0015 9E        		.byte	-98
 690 0016 81        		.byte	-127
 691 0017 F3        		.byte	-13
 692 0018 D7        		.byte	-41
 693 0019 FB        		.byte	-5
 694 001a 7C        		.byte	124
 695 001b E3        		.byte	-29
 696 001c 39        		.byte	57
 697 001d 82        		.byte	-126
 698 001e 9B        		.byte	-101
 699 001f 2F        		.byte	47
 700 0020 FF        		.byte	-1
 701 0021 87        		.byte	-121
 702 0022 34        		.byte	52
 703 0023 8E        		.byte	-114
 704 0024 43        		.byte	67
 705 0025 44        		.byte	68
 706 0026 C4        		.byte	-60
 707 0027 DE        		.byte	-34
 708 0028 E9        		.byte	-23
 709 0029 CB        		.byte	-53
 710 002a 54        		.byte	84
 711 002b 7B        		.byte	123
 712 002c 94        		.byte	-108
 713 002d 32        		.byte	50
 714 002e A6        		.byte	-90
 715 002f C2        		.byte	-62
 716 0030 23        		.byte	35
 717 0031 3D        		.byte	61
 718 0032 EE        		.byte	-18
 719 0033 4C        		.byte	76
 720 0034 95        		.byte	-107
 721 0035 0B        		.byte	11
 722 0036 42        		.byte	66
 723 0037 FA        		.byte	-6
 724 0038 C3        		.byte	-61
 725 0039 4E        		.byte	78
 726 003a 08        		.byte	8
 727 003b 2E        		.byte	46
 728 003c A1        		.byte	-95
 729 003d 66        		.byte	102
 730 003e 28        		.byte	40
 731 003f D9        		.byte	-39
 732 0040 24        		.byte	36
 733 0041 B2        		.byte	-78
 734 0042 76        		.byte	118
 735 0043 5B        		.byte	91
 736 0044 A2        		.byte	-94
 737 0045 49        		.byte	73
 738 0046 6D        		.byte	109
 739 0047 8B        		.byte	-117
 740 0048 D1        		.byte	-47
 741 0049 25        		.byte	37
 742 004a 72        		.byte	114
 743 004b F8        		.byte	-8
 744 004c F6        		.byte	-10
 745 004d 64        		.byte	100
 746 004e 86        		.byte	-122
 747 004f 68        		.byte	104
 748 0050 98        		.byte	-104
 749 0051 16        		.byte	22
 750 0052 D4        		.byte	-44
 751 0053 A4        		.byte	-92
 752 0054 5C        		.byte	92
 753 0055 CC        		.byte	-52
 754 0056 5D        		.byte	93
 755 0057 65        		.byte	101
 756 0058 B6        		.byte	-74
 757 0059 92        		.byte	-110
 758 005a 6C        		.byte	108
 759 005b 70        		.byte	112
 760 005c 48        		.byte	72
 761 005d 50        		.byte	80
 762 005e FD        		.byte	-3
 763 005f ED        		.byte	-19
 764 0060 B9        		.byte	-71
 765 0061 DA        		.byte	-38
 766 0062 5E        		.byte	94
 767 0063 15        		.byte	21
 768 0064 46        		.byte	70
 769 0065 57        		.byte	87
 770 0066 A7        		.byte	-89
 771 0067 8D        		.byte	-115
 772 0068 9D        		.byte	-99
 773 0069 84        		.byte	-124
 774 006a 90        		.byte	-112
 775 006b D8        		.byte	-40
 776 006c AB        		.byte	-85
 777 006d 00        		.byte	0
 778 006e 8C        		.byte	-116
 779 006f BC        		.byte	-68
 780 0070 D3        		.byte	-45
 781 0071 0A        		.byte	10
 782 0072 F7        		.byte	-9
 783 0073 E4        		.byte	-28
 784 0074 58        		.byte	88
 785 0075 05        		.byte	5
 786 0076 B8        		.byte	-72
 787 0077 B3        		.byte	-77
 788 0078 45        		.byte	69
 789 0079 06        		.byte	6
 790 007a D0        		.byte	-48
 791 007b 2C        		.byte	44
 792 007c 1E        		.byte	30
 793 007d 8F        		.byte	-113
 794 007e CA        		.byte	-54
 795 007f 3F        		.byte	63
 796 0080 0F        		.byte	15
 797 0081 02        		.byte	2
 798 0082 C1        		.byte	-63
 799 0083 AF        		.byte	-81
 800 0084 BD        		.byte	-67
 801 0085 03        		.byte	3
 802 0086 01        		.byte	1
 803 0087 13        		.byte	19
 804 0088 8A        		.byte	-118
 805 0089 6B        		.byte	107
 806 008a 3A        		.byte	58
 807 008b 91        		.byte	-111
 808 008c 11        		.byte	17
 809 008d 41        		.byte	65
 810 008e 4F        		.byte	79
 811 008f 67        		.byte	103
 812 0090 DC        		.byte	-36
 813 0091 EA        		.byte	-22
 814 0092 97        		.byte	-105
 815 0093 F2        		.byte	-14
 816 0094 CF        		.byte	-49
 817 0095 CE        		.byte	-50
 818 0096 F0        		.byte	-16
 819 0097 B4        		.byte	-76
 820 0098 E6        		.byte	-26
 821 0099 73        		.byte	115
 822 009a 96        		.byte	-106
 823 009b AC        		.byte	-84
 824 009c 74        		.byte	116
 825 009d 22        		.byte	34
 826 009e E7        		.byte	-25
 827 009f AD        		.byte	-83
 828 00a0 35        		.byte	53
 829 00a1 85        		.byte	-123
 830 00a2 E2        		.byte	-30
 831 00a3 F9        		.byte	-7
 832 00a4 37        		.byte	55
 833 00a5 E8        		.byte	-24
 834 00a6 1C        		.byte	28
 835 00a7 75        		.byte	117
 836 00a8 DF        		.byte	-33
 837 00a9 6E        		.byte	110
 838 00aa 47        		.byte	71
 839 00ab F1        		.byte	-15
 840 00ac 1A        		.byte	26
 841 00ad 71        		.byte	113
 842 00ae 1D        		.byte	29
 843 00af 29        		.byte	41
 844 00b0 C5        		.byte	-59
 845 00b1 89        		.byte	-119
 846 00b2 6F        		.byte	111
 847 00b3 B7        		.byte	-73
 848 00b4 62        		.byte	98
 849 00b5 0E        		.byte	14
 850 00b6 AA        		.byte	-86
 851 00b7 18        		.byte	24
 852 00b8 BE        		.byte	-66
 853 00b9 1B        		.byte	27
 854 00ba FC        		.byte	-4
 855 00bb 56        		.byte	86
 856 00bc 3E        		.byte	62
 857 00bd 4B        		.byte	75
 858 00be C6        		.byte	-58
 859 00bf D2        		.byte	-46
 860 00c0 79        		.byte	121
 861 00c1 20        		.byte	32
 862 00c2 9A        		.byte	-102
 863 00c3 DB        		.byte	-37
 864 00c4 C0        		.byte	-64
 865 00c5 FE        		.byte	-2
 866 00c6 78        		.byte	120
 867 00c7 CD        		.byte	-51
 868 00c8 5A        		.byte	90
 869 00c9 F4        		.byte	-12
 870 00ca 1F        		.byte	31
 871 00cb DD        		.byte	-35
 872 00cc A8        		.byte	-88
 873 00cd 33        		.byte	51
 874 00ce 88        		.byte	-120
 875 00cf 07        		.byte	7
 876 00d0 C7        		.byte	-57
 877 00d1 31        		.byte	49
 878 00d2 B1        		.byte	-79
 879 00d3 12        		.byte	18
 880 00d4 10        		.byte	16
 881 00d5 59        		.byte	89
 882 00d6 27        		.byte	39
 883 00d7 80        		.byte	-128
 884 00d8 EC        		.byte	-20
 885 00d9 5F        		.byte	95
 886 00da 60        		.byte	96
 887 00db 51        		.byte	81
 888 00dc 7F        		.byte	127
 889 00dd A9        		.byte	-87
 890 00de 19        		.byte	25
 891 00df B5        		.byte	-75
 892 00e0 4A        		.byte	74
 893 00e1 0D        		.byte	13
 894 00e2 2D        		.byte	45
 895 00e3 E5        		.byte	-27
 896 00e4 7A        		.byte	122
 897 00e5 9F        		.byte	-97
 898 00e6 93        		.byte	-109
 899 00e7 C9        		.byte	-55
 900 00e8 9C        		.byte	-100
 901 00e9 EF        		.byte	-17
 902 00ea A0        		.byte	-96
 903 00eb E0        		.byte	-32
 904 00ec 3B        		.byte	59
 905 00ed 4D        		.byte	77
 906 00ee AE        		.byte	-82
 907 00ef 2A        		.byte	42
 908 00f0 F5        		.byte	-11
 909 00f1 B0        		.byte	-80
 910 00f2 C8        		.byte	-56
 911 00f3 EB        		.byte	-21
 912 00f4 BB        		.byte	-69
 913 00f5 3C        		.byte	60
 914 00f6 83        		.byte	-125
 915 00f7 53        		.byte	83
 916 00f8 99        		.byte	-103
 917 00f9 61        		.byte	97
 918 00fa 17        		.byte	23
 919 00fb 2B        		.byte	43
 920 00fc 04        		.byte	4
 921 00fd 7E        		.byte	126
 922 00fe BA        		.byte	-70
 923 00ff 77        		.byte	119
 924 0100 D6        		.byte	-42
 925 0101 26        		.byte	38
 926 0102 E1        		.byte	-31
 927 0103 69        		.byte	105
 928 0104 14        		.byte	20
 929 0105 63        		.byte	99
 930 0106 55        		.byte	85
 931 0107 21        		.byte	33
 932 0108 0C        		.byte	12
 933 0109 7D        		.byte	125
 934               	.global	aes_sbox
 937               	aes_sbox:
 938 010a 63        		.byte	99
 939 010b 7C        		.byte	124
 940 010c 77        		.byte	119
 941 010d 7B        		.byte	123
 942 010e F2        		.byte	-14
 943 010f 6B        		.byte	107
 944 0110 6F        		.byte	111
 945 0111 C5        		.byte	-59
 946 0112 30        		.byte	48
 947 0113 01        		.byte	1
 948 0114 67        		.byte	103
 949 0115 2B        		.byte	43
 950 0116 FE        		.byte	-2
 951 0117 D7        		.byte	-41
 952 0118 AB        		.byte	-85
 953 0119 76        		.byte	118
 954 011a CA        		.byte	-54
 955 011b 82        		.byte	-126
 956 011c C9        		.byte	-55
 957 011d 7D        		.byte	125
 958 011e FA        		.byte	-6
 959 011f 59        		.byte	89
 960 0120 47        		.byte	71
 961 0121 F0        		.byte	-16
 962 0122 AD        		.byte	-83
 963 0123 D4        		.byte	-44
 964 0124 A2        		.byte	-94
 965 0125 AF        		.byte	-81
 966 0126 9C        		.byte	-100
 967 0127 A4        		.byte	-92
 968 0128 72        		.byte	114
 969 0129 C0        		.byte	-64
 970 012a B7        		.byte	-73
 971 012b FD        		.byte	-3
 972 012c 93        		.byte	-109
 973 012d 26        		.byte	38
 974 012e 36        		.byte	54
 975 012f 3F        		.byte	63
 976 0130 F7        		.byte	-9
 977 0131 CC        		.byte	-52
 978 0132 34        		.byte	52
 979 0133 A5        		.byte	-91
 980 0134 E5        		.byte	-27
 981 0135 F1        		.byte	-15
 982 0136 71        		.byte	113
 983 0137 D8        		.byte	-40
 984 0138 31        		.byte	49
 985 0139 15        		.byte	21
 986 013a 04        		.byte	4
 987 013b C7        		.byte	-57
 988 013c 23        		.byte	35
 989 013d C3        		.byte	-61
 990 013e 18        		.byte	24
 991 013f 96        		.byte	-106
 992 0140 05        		.byte	5
 993 0141 9A        		.byte	-102
 994 0142 07        		.byte	7
 995 0143 12        		.byte	18
 996 0144 80        		.byte	-128
 997 0145 E2        		.byte	-30
 998 0146 EB        		.byte	-21
 999 0147 27        		.byte	39
 1000 0148 B2        		.byte	-78
 1001 0149 75        		.byte	117
 1002 014a 09        		.byte	9
 1003 014b 83        		.byte	-125
 1004 014c 2C        		.byte	44
 1005 014d 1A        		.byte	26
 1006 014e 1B        		.byte	27
 1007 014f 6E        		.byte	110
 1008 0150 5A        		.byte	90
 1009 0151 A0        		.byte	-96
 1010 0152 52        		.byte	82
 1011 0153 3B        		.byte	59
 1012 0154 D6        		.byte	-42
 1013 0155 B3        		.byte	-77
 1014 0156 29        		.byte	41
 1015 0157 E3        		.byte	-29
 1016 0158 2F        		.byte	47
 1017 0159 84        		.byte	-124
 1018 015a 53        		.byte	83
 1019 015b D1        		.byte	-47
 1020 015c 00        		.byte	0
 1021 015d ED        		.byte	-19
 1022 015e 20        		.byte	32
 1023 015f FC        		.byte	-4
 1024 0160 B1        		.byte	-79
 1025 0161 5B        		.byte	91
 1026 0162 6A        		.byte	106
 1027 0163 CB        		.byte	-53
 1028 0164 BE        		.byte	-66
 1029 0165 39        		.byte	57
 1030 0166 4A        		.byte	74
 1031 0167 4C        		.byte	76
 1032 0168 58        		.byte	88
 1033 0169 CF        		.byte	-49
 1034 016a D0        		.byte	-48
 1035 016b EF        		.byte	-17
 1036 016c AA        		.byte	-86
 1037 016d FB        		.byte	-5
 1038 016e 43        		.byte	67
 1039 016f 4D        		.byte	77
 1040 0170 33        		.byte	51
 1041 0171 85        		.byte	-123
 1042 0172 45        		.byte	69
 1043 0173 F9        		.byte	-7
 1044 0174 02        		.byte	2
 1045 0175 7F        		.byte	127
 1046 0176 50        		.byte	80
 1047 0177 3C        		.byte	60
 1048 0178 9F        		.byte	-97
 1049 0179 A8        		.byte	-88
 1050 017a 51        		.byte	81
 1051 017b A3        		.byte	-93
 1052 017c 40        		.byte	64
 1053 017d 8F        		.byte	-113
 1054 017e 92        		.byte	-110
 1055 017f 9D        		.byte	-99
 1056 0180 38        		.byte	56
 1057 0181 F5        		.byte	-11
 1058 0182 BC        		.byte	-68
 1059 0183 B6        		.byte	-74
 1060 0184 DA        		.byte	-38
 1061 0185 21        		.byte	33
 1062 0186 10        		.byte	16
 1063 0187 FF        		.byte	-1
 1064 0188 F3        		.byte	-13
 1065 0189 D2        		.byte	-46
 1066 018a CD        		.byte	-51
 1067 018b 0C        		.byte	12
 1068 018c 13        		.byte	19
 1069 018d EC        		.byte	-20
 1070 018e 5F        		.byte	95
 1071 018f 97        		.byte	-105
 1072 0190 44        		.byte	68
 1073 0191 17        		.byte	23
 1074 0192 C4        		.byte	-60
 1075 0193 A7        		.byte	-89
 1076 0194 7E        		.byte	126
 1077 0195 3D        		.byte	61
 1078 0196 64        		.byte	100
 1079 0197 5D        		.byte	93
 1080 0198 19        		.byte	25
 1081 0199 73        		.byte	115
 1082 019a 60        		.byte	96
 1083 019b 81        		.byte	-127
 1084 019c 4F        		.byte	79
 1085 019d DC        		.byte	-36
 1086 019e 22        		.byte	34
 1087 019f 2A        		.byte	42
 1088 01a0 90        		.byte	-112
 1089 01a1 88        		.byte	-120
 1090 01a2 46        		.byte	70
 1091 01a3 EE        		.byte	-18
 1092 01a4 B8        		.byte	-72
 1093 01a5 14        		.byte	20
 1094 01a6 DE        		.byte	-34
 1095 01a7 5E        		.byte	94
 1096 01a8 0B        		.byte	11
 1097 01a9 DB        		.byte	-37
 1098 01aa E0        		.byte	-32
 1099 01ab 32        		.byte	50
 1100 01ac 3A        		.byte	58
 1101 01ad 0A        		.byte	10
 1102 01ae 49        		.byte	73
 1103 01af 06        		.byte	6
 1104 01b0 24        		.byte	36
 1105 01b1 5C        		.byte	92
 1106 01b2 C2        		.byte	-62
 1107 01b3 D3        		.byte	-45
 1108 01b4 AC        		.byte	-84
 1109 01b5 62        		.byte	98
 1110 01b6 91        		.byte	-111
 1111 01b7 95        		.byte	-107
 1112 01b8 E4        		.byte	-28
 1113 01b9 79        		.byte	121
 1114 01ba E7        		.byte	-25
 1115 01bb C8        		.byte	-56
 1116 01bc 37        		.byte	55
 1117 01bd 6D        		.byte	109
 1118 01be 8D        		.byte	-115
 1119 01bf D5        		.byte	-43
 1120 01c0 4E        		.byte	78
 1121 01c1 A9        		.byte	-87
 1122 01c2 6C        		.byte	108
 1123 01c3 56        		.byte	86
 1124 01c4 F4        		.byte	-12
 1125 01c5 EA        		.byte	-22
 1126 01c6 65        		.byte	101
 1127 01c7 7A        		.byte	122
 1128 01c8 AE        		.byte	-82
 1129 01c9 08        		.byte	8
 1130 01ca BA        		.byte	-70
 1131 01cb 78        		.byte	120
 1132 01cc 25        		.byte	37
 1133 01cd 2E        		.byte	46
 1134 01ce 1C        		.byte	28
 1135 01cf A6        		.byte	-90
 1136 01d0 B4        		.byte	-76
 1137 01d1 C6        		.byte	-58
 1138 01d2 E8        		.byte	-24
 1139 01d3 DD        		.byte	-35
 1140 01d4 74        		.byte	116
 1141 01d5 1F        		.byte	31
 1142 01d6 4B        		.byte	75
 1143 01d7 BD        		.byte	-67
 1144 01d8 8B        		.byte	-117
 1145 01d9 8A        		.byte	-118
 1146 01da 70        		.byte	112
 1147 01db 3E        		.byte	62
 1148 01dc B5        		.byte	-75
 1149 01dd 66        		.byte	102
 1150 01de 48        		.byte	72
 1151 01df 03        		.byte	3
 1152 01e0 F6        		.byte	-10
 1153 01e1 0E        		.byte	14
 1154 01e2 61        		.byte	97
 1155 01e3 35        		.byte	53
 1156 01e4 57        		.byte	87
 1157 01e5 B9        		.byte	-71
 1158 01e6 86        		.byte	-122
 1159 01e7 C1        		.byte	-63
 1160 01e8 1D        		.byte	29
 1161 01e9 9E        		.byte	-98
 1162 01ea E1        		.byte	-31
 1163 01eb F8        		.byte	-8
 1164 01ec 98        		.byte	-104
 1165 01ed 11        		.byte	17
 1166 01ee 69        		.byte	105
 1167 01ef D9        		.byte	-39
 1168 01f0 8E        		.byte	-114
 1169 01f1 94        		.byte	-108
 1170 01f2 9B        		.byte	-101
 1171 01f3 1E        		.byte	30
 1172 01f4 87        		.byte	-121
 1173 01f5 E9        		.byte	-23
 1174 01f6 CE        		.byte	-50
 1175 01f7 55        		.byte	85
 1176 01f8 28        		.byte	40
 1177 01f9 DF        		.byte	-33
 1178 01fa 8C        		.byte	-116
 1179 01fb A1        		.byte	-95
 1180 01fc 89        		.byte	-119
 1181 01fd 0D        		.byte	13
 1182 01fe BF        		.byte	-65
 1183 01ff E6        		.byte	-26
 1184 0200 42        		.byte	66
 1185 0201 68        		.byte	104
 1186 0202 41        		.byte	65
 1187 0203 99        		.byte	-103
 1188 0204 2D        		.byte	45
 1189 0205 0F        		.byte	15
 1190 0206 B0        		.byte	-80
 1191 0207 54        		.byte	84
 1192 0208 BB        		.byte	-69
 1193 0209 16        		.byte	22
 1194               		.text
 1195               	.Letext0:
 1196               		.file 2 "/usr/lib/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 AES_DEC_128.c
     /tmp/ccdLG0NH.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccdLG0NH.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccdLG0NH.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccdLG0NH.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccdLG0NH.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccdLG0NH.s:12     .text:0000000000000000 add_round_key
     /tmp/ccdLG0NH.s:642    .data:0000000000000010 cipherText
     /tmp/ccdLG0NH.s:54     .text:0000000000000022 inverse_subbytes
     /tmp/ccdLG0NH.s:89     .text:000000000000003a inverse_shift_rows
     /tmp/ccdLG0NH.s:151    .text:000000000000006e gf256mul
     /tmp/ccdLG0NH.s:203    .text:000000000000008e inverse_mix_coloumns
     /tmp/ccdLG0NH.s:387    .text:0000000000000178 gen_roundkey
     /tmp/ccdLG0NH.s:521    .text:0000000000000218 aes_dec_128
                            *COM*:00000000000000b0 roundkeyarr
                            *COM*:0000000000000010 stateText
     /tmp/ccdLG0NH.s:677    .rodata:000000000000000a aes_invsbox
     /tmp/ccdLG0NH.s:620    .data:0000000000000000 key
     /tmp/ccdLG0NH.s:663    .rodata:0000000000000000 rcon
     /tmp/ccdLG0NH.s:937    .rodata:000000000000010a aes_sbox

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
